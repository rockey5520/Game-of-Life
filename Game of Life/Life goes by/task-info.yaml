type: edu
custom_name: stage3
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage3Test;

    public class GameOfLifeTest extends GameOfLifeStage3Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeStage3Test.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.stage.BaseStageTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.Main

    abstract class GameOfLifeStage3Test : BaseStageTest<ClueWithChecker>(Main::class.java) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            // two times:
            return (5..MAX_SIZE).flatMap(::stage3Tests) + (5..MAX_SIZE).flatMap(::stage3Tests)
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }

        companion object {
            const val MAX_SIZE = 10
        }
    }

    fun stage3Tests(universeSize: Int): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest("$universeSize\n") { reply ->
                    @Suppress("FoldInitializerAndIfToElvis")
                    val generations = reply
                            .toLowerCase()
                            .lines()
                            .filter { it.isNotEmpty() }
                            .joinToString("\n")
                            .split("generation".toRegex())
                            .drop(1)
                            .map {
                                val lines = it.lines()
                                val (idString, aliveString) = lines
                                val map = lines.drop(2)

                                if (!map.canBeMap(universeSize)) {
                                    return@createDynamicFeedbackTest fail("Can't read map in:\n$it\n")
                                }

                                val id = intRegex.find(idString)?.groupValues?.firstOrNull()?.toInt()
                                if (id == null) {
                                    return@createDynamicFeedbackTest fail("Can't find generation ID:\n$it\n")
                                }

                                val alive = intRegex.find(aliveString)?.groupValues?.firstOrNull()?.toInt()
                                if (alive == null) {
                                    return@createDynamicFeedbackTest fail("Can't find alive count:\n$it\n")
                                }

                                val generation = Generation(id, alive, map)
                                val aliveOnMap = generation.aliveOnMap(universeSize)

                                if (aliveOnMap != alive) {
                                    return@createDynamicFeedbackTest fail(
                                            "Alive count is wrong ($alive expected, $aliveOnMap got):\n$it\n"
                                    )
                                }

                                return@map generation
                            }

                    if (generations.isEmpty()) {
                        return@createDynamicFeedbackTest fail("Your program doesn't output generations for size $universeSize")
                    }

                    if (generations.first().id != 1) {
                        return@createDynamicFeedbackTest fail("First generation has number ${generations.first().id}")
                    }

                    val diffs = generations.windowed(2)

                    diffs.forEach { (prev, next) ->
                        if (prev.id + 1 != next.id) {
                            return@createDynamicFeedbackTest fail("ID of the generation #${prev.id + 1} is wrong (${next.id})")
                        }

                        if (!prev.evolvesTo(next, universeSize)) {
                            return@createDynamicFeedbackTest fail("Wrong evolution from #${prev.id} to #${prev.id + 1}")
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }

    val intRegex = """(\d)+""".toRegex()

    fun List<String>.canBeMap(universeSize: Int): Boolean {
        if (this.size < universeSize) {
            return false
        }

        return this.take(universeSize).all { it.length >= universeSize }
    }

    data class Generation(val id: Int, val alive: Int, val map: List<String>) {
        fun aliveOnMap(universeSize: Int): Int {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) -> map[x][y] }
                    .count { it.isAlive() }
        }

        fun evolvesTo(other: Generation, universeSize: Int): Boolean {
            return (0 until universeSize)
                    .flatMap { y -> (0 until universeSize).map { x -> x to y } }
                    .map { (x, y) ->
                        if (map[x][y].isAlive()) {
                            if (aliveNeighbours(x, y, universeSize) in setOf(2, 3)) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        } else {
                            if (aliveNeighbours(x, y, universeSize) == 3) {
                                other.map[x][y].isAlive()
                            } else {
                                !other.map[x][y].isAlive()
                            }
                        }
                    }
                    .all { it }
        }

        fun aliveNeighbours(x: Int, y: Int, universeSize: Int): Int {
            var north = x - 1
            if (north < 0) north = universeSize - 1
            var south = x + 1
            if (south > universeSize - 1) south = 0
            var west = y - 1
            if (west < 0) west = universeSize - 1
            var east = y + 1
            if (east > universeSize - 1) east = 0

            var aliveNeighbours = 0
            if (map[north][west].isAlive()) ++aliveNeighbours
            if (map[north][y].isAlive()) ++aliveNeighbours
            if (map[north][east].isAlive()) ++aliveNeighbours
            if (map[x][west].isAlive()) ++aliveNeighbours
            if (map[x][east].isAlive()) ++aliveNeighbours
            if (map[south][west].isAlive()) ++aliveNeighbours
            if (map[south][y].isAlive()) ++aliveNeighbours
            if (map[south][east].isAlive()) ++aliveNeighbours

            return aliveNeighbours
        }

        fun Char.isAlive(): Boolean = this != ' '
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |-
    package life;

    import java.util.ArrayList;
    import java.util.BitSet;
    import java.util.List;
    import java.util.Random;

    import static java.util.stream.Collectors.joining;
    import static java.util.stream.IntStream.range;

    public class Universe {
      final List<BitSet> map;

      Universe(final int size, final long seed) {
        this(size);
        initialise(seed);
      }

      Universe(final int size) {
        map = new ArrayList<>(size);
        range(0, size).mapToObj(i -> new BitSet(size)).forEach(map::add);
      }

      void initialise(long seed) {
        final var random = new Random(seed);
        map.forEach(row -> range(0, map.size()).filter(i -> random.nextBoolean()).forEach(row::set));
      }

      private String getRowAsString(BitSet row) {
        return range(0, map.size()).mapToObj(i -> row.get(i) ? "O" : " ").collect(joining());
      }

      boolean isLive(int row, int col) {
        return map.get(normalise(row)).get(normalise(col));
      }

      int getValue(int row, int col) {
        return isLive(row, col) ? 1 : 0;
      }

      int getNeighboursCount(int row, int col) {
        return getValue(row - 1, col - 1)
            + getValue(row - 1, col)
            + getValue(row - 1, col + 1)
            + getValue(row, col - 1)
            + getValue(row, col + 1)
            + getValue(row + 1, col - 1)
            + getValue(row + 1, col)
            + getValue(row + 1, col + 1);
      }

      int normalise(int i) {
        if (i == -1) {
          return map.size() - 1;
        }
        if (i == map.size()) {
          return 0;
        }
        return i;
      }

      public int size() {
        return map.size();
      }

      public void print() {
        map.stream().map(this::getRowAsString).forEach(System.out::println);
      }

      public void setCell(final int row, final int col, final boolean isLive) {
        map.get(row).set(col, isLive);
      }
    }
  learner_created: true
- name: src/life/GenerationAlgorithm.java
  visible: true
  text: |-
    package life;

    public class GenerationAlgorithm {
      static Universe getNextGeneration(Universe currentUniverse) {
        Universe nextGeneration = new Universe(currentUniverse.size());

        for (int row = 0; row < currentUniverse.size(); ++row) {
          for (int col = 0; col < currentUniverse.size(); ++col) {
            final int neighbours = currentUniverse.getNeighboursCount(row, col);
            final var isLive = neighbours == 3 || neighbours == 2 && currentUniverse.isLive(row, col);
            nextGeneration.setCell(row, col, isLive);
          }
        }
        return nextGeneration;
      }
    }
  learner_created: true
- name: src/life/Main.java
  visible: true
  text: |+
    package life;

    import static java.lang.System.in;
    import static life.GenerationAlgorithm.getNextGeneration;

    import java.util.Scanner;

    public class Main {

      public static void main(String[] args) {
        // stage 2
        Scanner scanner = new Scanner(in);
        final int UniverseSize = scanner.nextInt();
        final long seed = scanner.nextLong();
        final int generations = scanner.nextInt();
        scanner.close();

        Universe universe = new Universe(UniverseSize, seed);
        for (int i = 0; i < generations; ++i) {
          universe = getNextGeneration(universe);
        }
        universe.print();

        /*//stage 1
        Scanner scanner = new Scanner(in);
        int arraySize = scanner.nextInt();
        int seed = scanner.nextInt();
        Random random = new Random(seed);

        for (int i = 0; i < arraySize; i++) {
          for (int j = 0; j < arraySize; j++) {
            if (random.nextBoolean()) {
              System.out.print("O");
            } else {
              System.out.print(" ");
            }
          }
          System.out.println();
        }*/
      }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement
status: Solved
record: 3
