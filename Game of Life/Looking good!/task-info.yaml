type: edu
custom_name: stage4
files:
- name: test/GameOfLifeTest.java
  visible: false
  text: |2

    import common.GameOfLifeStage4Test;

    public class GameOfLifeTest extends GameOfLifeStage4Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun fail(message: String) = CheckResult(false, message)
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |-
    package life;

    import java.util.ArrayList;
    import java.util.BitSet;
    import java.util.List;
    import java.util.Random;

    import static java.util.stream.Collectors.joining;
    import static java.util.stream.IntStream.range;

    public class Universe {
      private final List<BitSet> map;
      private int generation = 1;

      Universe(final int size, final long seed) {
        this(size);
        initialise(seed);
      }

      Universe(final int size) {
        map = new ArrayList<>(size);
        range(0, size).mapToObj(i -> new BitSet(size)).forEach(map::add);
      }

      Universe initialise(long seed) {
        final var random = new Random(seed);
        map.forEach(row -> range(0, map.size()).filter(i -> random.nextBoolean()).forEach(row::set));
        return this;
      }

      Universe initialise() {
        final var random = new Random();
        map.forEach(row -> range(0, map.size()).filter(i -> random.nextBoolean()).forEach(row::set));
        return this;
      }

      private String getRowAsString(BitSet row) {
        return range(0, map.size()).mapToObj(i -> row.get(i) ? "O" : " ").collect(joining());
      }

      boolean isLive(int row, int col) {
        return map.get(normalise(row)).get(normalise(col));
      }

      int getValue(int row, int col) {
        return isLive(row, col) ? 1 : 0;
      }

      int getNeighboursCount(int row, int col) {
        return getValue(row - 1, col - 1)
            + getValue(row - 1, col)
            + getValue(row - 1, col + 1)
            + getValue(row, col - 1)
            + getValue(row, col + 1)
            + getValue(row + 1, col - 1)
            + getValue(row + 1, col)
            + getValue(row + 1, col + 1);
      }

      int normalise(int i) {
        if (i == -1) {
          return map.size() - 1;
        }
        if (i == map.size()) {
          return 0;
        }
        return i;
      }

      public int size() {
        return map.size();
      }

      public void printMap() {
        map.stream().map(this::getRowAsString).forEach(System.out::println);
      }

      public void setCell(final int row, final int col, final boolean isLive) {
        map.get(row).set(col, isLive);
      }

      int getAliveCount() {
        return map.stream().mapToInt(BitSet::cardinality).sum();
      }

      int getGeneration() {
        return generation;
      }

      void nextGeneration() {
        List<BitSet> next = new ArrayList<>(map.size());

        for (int row = 0; row < map.size(); ++row) {
          final var nextRow = new BitSet(map.size());
          for (int col = 0; col < map.size(); ++col) {
            final int neighbours = getNeighboursCount(row, col);
            final var isLive = neighbours == 3 || neighbours == 2 && isLive(row, col);
            nextRow.set(col, isLive);
          }
          next.add(nextRow);
        }
        for (int i = 0; i < map.size(); ++i) {
          map.set(i, next.get(i));
        }
        ++generation;
      }
    }
  learner_created: true
- name: src/life/GenerationAlgorithm.java
  visible: true
  text: |-
    package life;

    public class GenerationAlgorithm {
      static Universe getNextGeneration(Universe currentUniverse) {
        Universe nextGeneration = new Universe(currentUniverse.size());

        for (int row = 0; row < currentUniverse.size(); ++row) {
          for (int col = 0; col < currentUniverse.size(); ++col) {
            final int neighbours = currentUniverse.getNeighboursCount(row, col);
            final var isLive = neighbours == 3 || neighbours == 2 && currentUniverse.isLive(row, col);
            nextGeneration.setCell(row, col, isLive);
          }
        }
        return nextGeneration;
      }
    }
  learner_created: true
- name: src/life/Main.java
  visible: true
  text: |+
    package life;

    import static java.lang.System.in;
    import static life.GenerationAlgorithm.getNextGeneration;

    import java.io.IOException;
    import java.util.Scanner;

    public class Main {

      public static void main(String[] args) throws InterruptedException {
    //stage 3
        Scanner scanner = new Scanner(in);
        int universeSize = scanner.nextInt();
        final int generations = 11;
        scanner.close();

        Universe universe = new Universe(universeSize).initialise();

        for (int i = 0; i < generations; ++i) {
          System.out.printf("Generation #%d%nAlive: %d%n", universe.getGeneration(),
              universe.getAliveCount());
          universe.printMap();
          universe.nextGeneration();
          Thread.sleep(1000);
          clearScreen();
        }
      }

      static void clearScreenOld() {
        try {
          if (System.getProperty("os.name").contains("Windows"))
            new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
          else
            Runtime.getRuntime().exec("clear");
        } catch (IOException | InterruptedException e) {
          e.printStackTrace();
        }
      }

      public static void clearScreen() {
        System.out.print("\033[H\033[2J");
        System.out.flush();
      }
    }
        /*
        // stage 2
        Scanner scanner = new Scanner(in);
        final int UniverseSize = scanner.nextInt();
        final long seed = scanner.nextLong();
        final int generations = scanner.nextInt();
        scanner.close();

        Universe universe = new Universe(UniverseSize, seed);
        for (int i = 0; i < generations; ++i) {
          universe = getNextGeneration(universe);
        }
        universe.print();
    */

        /*//stage 1
        Scanner scanner = new Scanner(in);
        int arraySize = scanner.nextInt();
        int seed = scanner.nextInt();
        Random random = new Random(seed);

        for (int i = 0; i < arraySize; i++) {
          for (int j = 0; j < arraySize; j++) {
            if (random.nextBoolean()) {
              System.out.print("O");
            } else {
              System.out.print(" ");
            }
          }
          System.out.println();
        }*/


  learner_created: true
- name: src/life/GameOfLife.java
  visible: true
  learner_created: true
- name: src/life/DrawUI.java
  visible: true
  learner_created: true
- name: src/life/Earth.java
  visible: true
  learner_created: true
- name: src/life/DrawPanel.java
  visible: true
  learner_created: true
- name: src/life/Cell.java
  visible: true
  learner_created: true
- name: src/life/Controller.java
  visible: true
  learner_created: true
- name: src/life/UniverseGenerator.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement
status: Solved
record: 4
